
ext_sram_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00000518  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000518  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012fb  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b8c  00000000  00000000  00001aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b37  00000000  00000000  0000263b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000244  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f8  00000000  00000000  000033b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009cb  00000000  00000000  000039b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000437b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 3b       	cpi	r26, 0xBC	; 188
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac eb       	ldi	r26, 0xBC	; 188
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 3b       	cpi	r26, 0xBC	; 188
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	39 d0       	rcall	.+114    	; 0x136 <main>
  c4:	27 c2       	rjmp	.+1102   	; 0x514 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <us_delay>:
#include"avr_lib.h"

void us_delay(unsigned short time_us){
  c8:	ac 01       	movw	r20, r24
	
	register u08 i;

	for(i=0; i < time_us ; i++){		//4 
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <us_delay+0xc>
		asm volatile("PUSH R0");		//2
  ce:	0f 92       	push	r0
		asm volatile("POP R0");			//2	 = 8cycle = 1.08us
  d0:	0f 90       	pop	r0

void us_delay(unsigned short time_us){
	
	register u08 i;

	for(i=0; i < time_us ; i++){		//4 
  d2:	9f 5f       	subi	r25, 0xFF	; 255
  d4:	29 2f       	mov	r18, r25
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	24 17       	cp	r18, r20
  da:	35 07       	cpc	r19, r21
  dc:	c0 f3       	brcs	.-16     	; 0xce <us_delay+0x6>
		asm volatile("PUSH R0");		//2
		asm volatile("POP R0");			//2	 = 8cycle = 1.08us
									
	}

}
  de:	08 95       	ret

000000e0 <ms_delay>:
void ms_delay(u16 time_ms){
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	8c 01       	movw	r16, r24
	register u16 i;

	for(i=0; i < time_ms ; i++){	
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	0d c0       	rjmp	.+26     	; 0x10a <ms_delay+0x2a>
		us_delay(250);	
  f0:	8a ef       	ldi	r24, 0xFA	; 250
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	e9 df       	rcall	.-46     	; 0xc8 <us_delay>
		us_delay(250);	
  f6:	8a ef       	ldi	r24, 0xFA	; 250
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	e6 df       	rcall	.-52     	; 0xc8 <us_delay>
		us_delay(250);	
  fc:	8a ef       	ldi	r24, 0xFA	; 250
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	e3 df       	rcall	.-58     	; 0xc8 <us_delay>
		us_delay(250);	// 1us * 1000 = 1ms
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	e0 df       	rcall	.-64     	; 0xc8 <us_delay>
 108:	21 96       	adiw	r28, 0x01	; 1

}
void ms_delay(u16 time_ms){
	register u16 i;

	for(i=0; i < time_ms ; i++){	
 10a:	c0 17       	cp	r28, r16
 10c:	d1 07       	cpc	r29, r17
 10e:	80 f3       	brcs	.-32     	; 0xf0 <ms_delay+0x10>
 110:	df 91       	pop	r29
		us_delay(250);	
		us_delay(250);	
		us_delay(250);	// 1us * 1000 = 1ms
		
	}
}
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	08 95       	ret

0000011a <putch>:
#define write_XRAM(address,value) ((*(volatile unsigned char *)(0x1100+address))=value)


void putch(unsigned char data){

 while((UCSR0A & 0x20) == 0); 
 11a:	5d 9b       	sbis	0x0b, 5	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <putch>

 UDR0 = data;
 11e:	8c b9       	out	0x0c, r24	; 12

 UCSR0A |= 0x20;
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	80 62       	ori	r24, 0x20	; 32
 124:	8b b9       	out	0x0b, r24	; 11
 126:	08 95       	ret

00000128 <getch>:

unsigned char getch(){

 unsigned char data;

 while((UCSR0A & 0x80)==0);
 128:	5f 9b       	sbis	0x0b, 7	; 11
 12a:	fe cf       	rjmp	.-4      	; 0x128 <getch>

 data=UDR0;
 12c:	8c b1       	in	r24, 0x0c	; 12

 UCSR0A |= 0x80;
 12e:	9b b1       	in	r25, 0x0b	; 11
 130:	90 68       	ori	r25, 0x80	; 128
 132:	9b b9       	out	0x0b, r25	; 11

 return data;
}
 134:	08 95       	ret

00000136 <main>:


unsigned char msg_Buf[32]={0};

int main(){
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	cb 5b       	subi	r28, 0xBB	; 187
 146:	d1 09       	sbc	r29, r1
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61

 unsigned char i=0,j=0;
 unsigned char line1,line2;
 unsigned char Tmp=0; 
 unsigned char text[]="\n\r**************************************"
 152:	8b eb       	ldi	r24, 0xBB	; 187
 154:	e0 e0       	ldi	r30, 0x00	; 0
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	de 01       	movw	r26, r28
 15a:	11 96       	adiw	r26, 0x01	; 1
 15c:	01 90       	ld	r0, Z+
 15e:	0d 92       	st	X+, r0
 160:	8a 95       	dec	r24
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x26>
  					   "\n\r TextLCD에 출력할 데이타를 입력하세요\n\r"
					   " (종료 : Enter키, 32바이트 이내)\n\r" 
					   "**************************************\n\r >> ";

// 2)
 MCUCR |= 0x80; // 외부 메모리 enable
 164:	85 b7       	in	r24, 0x35	; 53
 166:	80 68       	ori	r24, 0x80	; 128
 168:	85 bf       	out	0x35, r24	; 53
 XMCRA |= 0x40; // lower sector = 0x1100 - 0xffff ,Upper sector = 0x8000 - 0xffff
 16a:	ed e6       	ldi	r30, 0x6D	; 109
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 83       	st	Z, r24
 XMCRB = 0x00; 
 174:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
 
// 3)
 DDRE = 0xfe; // Rx(입력 0), Tx(출력, 1)
 178:	8e ef       	ldi	r24, 0xFE	; 254
 17a:	82 b9       	out	0x02, r24	; 2

 UCSR0A = 0x00;
 17c:	1b b8       	out	0x0b, r1	; 11
 UCSR0B = 0x18; // Rx, Tx enable
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	8a b9       	out	0x0a, r24	; 10
 UCSR0C = 0x06; // 비동기 방식, No Parity bit, 1 Stop bit
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 
 UBRR0H = 0x00;
 188:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 UBRR0L = 0x03; //7.3728 MHz -> 115200 bps
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	89 b9       	out	0x09, r24	; 9

// 4)
 lcdInit(); //TextLCD 초기화 
 190:	98 d1       	rcall	.+816    	; 0x4c2 <lcdInit>
 ms_delay(100);	
 192:	84 e6       	ldi	r24, 0x64	; 100
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	a4 df       	rcall	.-184    	; 0xe0 <ms_delay>
 UDR0 = 0;
 198:	1c b8       	out	0x0c, r1	; 12

unsigned char msg_Buf[32]={0};

int main(){

 unsigned char i=0,j=0;
 19a:	10 e0       	ldi	r17, 0x00	; 0
 ms_delay(100);	
 UDR0 = 0;

// 5)
  while(text[j]!='\0')
   putch(text[j++]);
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <main+0x6c>
 19e:	1f 5f       	subi	r17, 0xFF	; 255
 1a0:	bc df       	rcall	.-136    	; 0x11a <putch>
 lcdInit(); //TextLCD 초기화 
 ms_delay(100);	
 UDR0 = 0;

// 5)
  while(text[j]!='\0')
 1a2:	e1 e0       	ldi	r30, 0x01	; 1
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	e1 0f       	add	r30, r17
 1ac:	f1 1d       	adc	r31, r1
 1ae:	80 81       	ld	r24, Z
 1b0:	81 11       	cpse	r24, r1
 1b2:	f5 cf       	rjmp	.-22     	; 0x19e <main+0x68>
   putch(text[j++]);
	
 while(1){
 
  Tmp = getch();
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	b8 df       	rcall	.-144    	; 0x128 <getch>
 1b8:	08 2f       	mov	r16, r24
  putch(Tmp);
 1ba:	af df       	rcall	.-162    	; 0x11a <putch>
 1bc:	0d 30       	cpi	r16, 0x0D	; 13
 
  if((Tmp == '\r') || i > 32) {
 1be:	71 f0       	breq	.+28     	; 0x1dc <main+0xa6>
 1c0:	11 32       	cpi	r17, 0x21	; 33
 1c2:	60 f4       	brcc	.+24     	; 0x1dc <main+0xa6>
 1c4:	e1 2f       	mov	r30, r17
    break;
  }
 
  write_XRAM(0x0100+i,Tmp); 
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	fe 5e       	subi	r31, 0xEE	; 238
 1ca:	00 83       	st	Z, r16
 1cc:	83 ec       	ldi	r24, 0xC3	; 195
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	99 e0       	ldi	r25, 0x09	; 9
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x9a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0xa0>
 1d6:	00 00       	nop
 1d8:	1f 5f       	subi	r17, 0xFF	; 255
  _delay_ms(10); 
  i++;
 1da:	ed cf       	rjmp	.-38     	; 0x1b6 <main+0x80>

 }
 1dc:	11 31       	cpi	r17, 0x11	; 17
 
 // 6)
 if(i<=16){
 1de:	38 f0       	brcs	.+14     	; 0x1ee <main+0xb8>
 1e0:	0f 2e       	mov	r0, r31
   line1 = i;
   line2 =0;
 }
 else{
   line1 = i - (i-16);
   line2 = i-16-1;
 1e2:	ff ee       	ldi	r31, 0xEF	; 239
 1e4:	ff 2e       	mov	r15, r31
 1e6:	f0 2d       	mov	r31, r0
 1e8:	f1 0e       	add	r15, r17
 1ea:	10 e1       	ldi	r17, 0x10	; 16
 if(i<=16){
   line1 = i;
   line2 =0;
 }
 else{
   line1 = i - (i-16);
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <main+0xba>
 1ee:	f1 2c       	mov	r15, r1
 }
 
 // 6)
 if(i<=16){
   line1 = i;
   line2 =0;
 1f0:	87 ea       	ldi	r24, 0xA7	; 167
 1f2:	91 e6       	ldi	r25, 0x61	; 97
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0xbe>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xc4>
 1fa:	00 00       	nop
 1fc:	00 e0       	ldi	r16, 0x00	; 0


 _delay_ms(100);
 
 // 7)
 for(j=0;j<line1;j++){ // 읽어들인 문자열 출력 
 1fe:	0c c0       	rjmp	.+24     	; 0x218 <main+0xe2>
  lcdDataWrite(read_XRAM(0x0100+j)); 
 200:	e0 2f       	mov	r30, r16
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	fe 5e       	subi	r31, 0xEE	; 238
 206:	80 81       	ld	r24, Z
 208:	f0 d0       	rcall	.+480    	; 0x3ea <lcdDataWrite>
 20a:	83 ec       	ldi	r24, 0xC3	; 195
 20c:	99 e0       	ldi	r25, 0x09	; 9
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0xd8>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0xde>
 214:	00 00       	nop


 _delay_ms(100);
 
 // 7)
 for(j=0;j<line1;j++){ // 읽어들인 문자열 출력 
 216:	0f 5f       	subi	r16, 0xFF	; 255
 218:	01 17       	cp	r16, r17
 21a:	90 f3       	brcs	.-28     	; 0x200 <main+0xca>
  lcdDataWrite(read_XRAM(0x0100+j)); 
  _delay_ms(10); 
  }

  lcdGotoXY(0,1);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	12 d1       	rcall	.+548    	; 0x446 <lcdGotoXY>
 222:	00 e0       	ldi	r16, 0x00	; 0

for(j=0;j<line2;j++){ // 읽어들인 문자열 출력 
 224:	0e c0       	rjmp	.+28     	; 0x242 <main+0x10c>
  lcdDataWrite(read_XRAM(0x0100+j+line1)); 
 226:	e0 2f       	mov	r30, r16
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	fe 5e       	subi	r31, 0xEE	; 238
 22c:	e1 0f       	add	r30, r17
 22e:	f1 1d       	adc	r31, r1
 230:	80 81       	ld	r24, Z
 232:	db d0       	rcall	.+438    	; 0x3ea <lcdDataWrite>
 234:	83 ec       	ldi	r24, 0xC3	; 195
 236:	99 e0       	ldi	r25, 0x09	; 9
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x102>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x108>
 23e:	00 00       	nop
 240:	0f 5f       	subi	r16, 0xFF	; 255
  _delay_ms(10); 
  }

  lcdGotoXY(0,1);

for(j=0;j<line2;j++){ // 읽어들인 문자열 출력 
 242:	0f 15       	cp	r16, r15
 244:	80 f3       	brcs	.-32     	; 0x226 <main+0xf0>
 246:	80 e0       	ldi	r24, 0x00	; 0
  _delay_ms(10); 
  }
 
 
 return 0;
}
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	c5 54       	subi	r28, 0x45	; 69
 24c:	df 4f       	sbci	r29, 0xFF	; 255
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	ff 90       	pop	r15
 262:	08 95       	ret

00000264 <lcdInitHW>:
 264:	88 b3       	in	r24, 0x18	; 24
}

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
 266:	8e 7f       	andi	r24, 0xFE	; 254
 268:	88 bb       	out	0x18, r24	; 24
 26a:	88 b3       	in	r24, 0x18	; 24
 26c:	8d 7f       	andi	r24, 0xFD	; 253
 26e:	88 bb       	out	0x18, r24	; 24
 270:	88 b3       	in	r24, 0x18	; 24
 272:	8b 7f       	andi	r24, 0xFB	; 251
 274:	88 bb       	out	0x18, r24	; 24
 276:	87 b3       	in	r24, 0x17	; 23
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	87 bb       	out	0x17, r24	; 23
 27c:	87 b3       	in	r24, 0x17	; 23
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	87 bb       	out	0x17, r24	; 23
 282:	87 b3       	in	r24, 0x17	; 23
 284:	84 60       	ori	r24, 0x04	; 4
 286:	87 bb       	out	0x17, r24	; 23
 288:	11 ba       	out	0x11, r1	; 17
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	08 95       	ret

00000290 <lcdBusyWait>:
 290:	88 b3       	in	r24, 0x18	; 24
 292:	8e 7f       	andi	r24, 0xFE	; 254
 294:	88 bb       	out	0x18, r24	; 24
 296:	11 ba       	out	0x11, r1	; 17
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	82 bb       	out	0x12, r24	; 18
 29c:	88 b3       	in	r24, 0x18	; 24
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	88 bb       	out	0x18, r24	; 24
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	84 60       	ori	r24, 0x04	; 4
 2a6:	88 bb       	out	0x18, r24	; 24
	...
 2c0:	36 c0       	rjmp	.+108    	; 0x32e <lcdBusyWait+0x9e>
 2c2:	88 b3       	in	r24, 0x18	; 24
 2c4:	8b 7f       	andi	r24, 0xFB	; 251
 2c6:	88 bb       	out	0x18, r24	; 24
	...
 2f8:	88 b3       	in	r24, 0x18	; 24
 2fa:	84 60       	ori	r24, 0x04	; 4
 2fc:	88 bb       	out	0x18, r24	; 24
	...
 32e:	87 99       	sbic	0x10, 7	; 16
 330:	c8 cf       	rjmp	.-112    	; 0x2c2 <lcdBusyWait+0x32>
 332:	88 b3       	in	r24, 0x18	; 24
 334:	8b 7f       	andi	r24, 0xFB	; 251
 336:	88 bb       	out	0x18, r24	; 24
 338:	08 95       	ret

0000033a <lcdControlWrite>:
 33a:	cf 93       	push	r28
 33c:	c8 2f       	mov	r28, r24
 33e:	a8 df       	rcall	.-176    	; 0x290 <lcdBusyWait>
 340:	88 b3       	in	r24, 0x18	; 24
 342:	8e 7f       	andi	r24, 0xFE	; 254
 344:	88 bb       	out	0x18, r24	; 24
 346:	88 b3       	in	r24, 0x18	; 24
 348:	8d 7f       	andi	r24, 0xFD	; 253
 34a:	88 bb       	out	0x18, r24	; 24
 34c:	88 b3       	in	r24, 0x18	; 24
 34e:	84 60       	ori	r24, 0x04	; 4
 350:	88 bb       	out	0x18, r24	; 24
 352:	9f ef       	ldi	r25, 0xFF	; 255
 354:	91 bb       	out	0x11, r25	; 17
 356:	c2 bb       	out	0x12, r28	; 18
	...
 388:	88 b3       	in	r24, 0x18	; 24
 38a:	8b 7f       	andi	r24, 0xFB	; 251
 38c:	88 bb       	out	0x18, r24	; 24
 38e:	11 ba       	out	0x11, r1	; 17
 390:	92 bb       	out	0x12, r25	; 18
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <lcdControlRead>:
 396:	7c df       	rcall	.-264    	; 0x290 <lcdBusyWait>
 398:	11 ba       	out	0x11, r1	; 17
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	82 bb       	out	0x12, r24	; 18
 39e:	88 b3       	in	r24, 0x18	; 24
 3a0:	8e 7f       	andi	r24, 0xFE	; 254
 3a2:	88 bb       	out	0x18, r24	; 24
 3a4:	88 b3       	in	r24, 0x18	; 24
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	88 bb       	out	0x18, r24	; 24
 3aa:	88 b3       	in	r24, 0x18	; 24
 3ac:	84 60       	ori	r24, 0x04	; 4
 3ae:	88 bb       	out	0x18, r24	; 24
	...
 3e0:	80 b3       	in	r24, 0x10	; 16
 3e2:	98 b3       	in	r25, 0x18	; 24
 3e4:	9b 7f       	andi	r25, 0xFB	; 251
 3e6:	98 bb       	out	0x18, r25	; 24
 3e8:	08 95       	ret

000003ea <lcdDataWrite>:
 3ea:	cf 93       	push	r28
 3ec:	c8 2f       	mov	r28, r24
 3ee:	50 df       	rcall	.-352    	; 0x290 <lcdBusyWait>
 3f0:	88 b3       	in	r24, 0x18	; 24
 3f2:	81 60       	ori	r24, 0x01	; 1
 3f4:	88 bb       	out	0x18, r24	; 24
 3f6:	88 b3       	in	r24, 0x18	; 24
 3f8:	8d 7f       	andi	r24, 0xFD	; 253
 3fa:	88 bb       	out	0x18, r24	; 24
 3fc:	88 b3       	in	r24, 0x18	; 24
 3fe:	84 60       	ori	r24, 0x04	; 4
 400:	88 bb       	out	0x18, r24	; 24
 402:	9f ef       	ldi	r25, 0xFF	; 255
 404:	91 bb       	out	0x11, r25	; 17
 406:	c2 bb       	out	0x12, r28	; 18
	...
 438:	88 b3       	in	r24, 0x18	; 24
 43a:	8b 7f       	andi	r24, 0xFB	; 251
 43c:	88 bb       	out	0x18, r24	; 24
 43e:	11 ba       	out	0x11, r1	; 17
 440:	92 bb       	out	0x12, r25	; 18
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <lcdGotoXY>:
void lcdGotoXY(u08 x, u08 y)
{
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
 446:	62 30       	cpi	r22, 0x02	; 2
 448:	31 f0       	breq	.+12     	; 0x456 <lcdGotoXY+0x10>
 44a:	63 30       	cpi	r22, 0x03	; 3
 44c:	31 f0       	breq	.+12     	; 0x45a <lcdGotoXY+0x14>
 44e:	61 30       	cpi	r22, 0x01	; 1
 450:	29 f4       	brne	.+10     	; 0x45c <lcdGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 452:	80 5c       	subi	r24, 0xC0	; 192
 454:	03 c0       	rjmp	.+6      	; 0x45c <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 456:	8c 5e       	subi	r24, 0xEC	; 236
 458:	01 c0       	rjmp	.+2      	; 0x45c <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 45a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
 45c:	80 68       	ori	r24, 0x80	; 128
 45e:	6d cf       	rjmp	.-294    	; 0x33a <lcdControlWrite>
 460:	08 95       	ret

00000462 <lcdLoadCustomChar>:
}


void lcdLoadCustomChar(u08 romCharNum, u08 lcdCharNum)
{
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	d8 2f       	mov	r29, r24
 46c:	16 2f       	mov	r17, r22
	u08 saveDDRAMAddr;
	u32 lcd_temp;

	lcd_temp = 0x100be;
	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
 46e:	93 df       	rcall	.-218    	; 0x396 <lcdControlRead>
 470:	08 2f       	mov	r16, r24
 472:	0f 77       	andi	r16, 0x7F	; 127

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
 474:	11 0f       	add	r17, r17
 476:	11 0f       	add	r17, r17
 478:	11 0f       	add	r17, r17
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes
 47a:	dd 0f       	add	r29, r29
 47c:	dd 0f       	add	r29, r29
 47e:	dd 0f       	add	r29, r29

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
 480:	c0 e0       	ldi	r28, 0x00	; 0
 482:	15 c0       	rjmp	.+42     	; 0x4ae <lcdLoadCustomChar+0x4c>
	{
//		add_temp = 65742+romCharNum+i;
//		if(add_temp-0xffff => 0) lcd_temp = add_temp
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
 484:	8c 2f       	mov	r24, r28
 486:	81 0f       	add	r24, r17
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	57 df       	rcall	.-338    	; 0x33a <lcdControlWrite>
		// write character data
		lcdDataWrite( pgm_read_byte_far(lcd_temp+romCharNum+i) );
 48c:	8d 2f       	mov	r24, r29
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	a0 e0       	ldi	r26, 0x00	; 0
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	82 54       	subi	r24, 0x42	; 66
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	ae 4f       	sbci	r26, 0xFE	; 254
 49a:	bf 4f       	sbci	r27, 0xFF	; 255
 49c:	8c 0f       	add	r24, r28
 49e:	91 1d       	adc	r25, r1
 4a0:	a1 1d       	adc	r26, r1
 4a2:	b1 1d       	adc	r27, r1
 4a4:	ab bf       	out	0x3b, r26	; 59
 4a6:	fc 01       	movw	r30, r24
 4a8:	87 91       	elpm	r24, Z+
 4aa:	9f df       	rcall	.-194    	; 0x3ea <lcdDataWrite>
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
 4ac:	cf 5f       	subi	r28, 0xFF	; 255
 4ae:	c8 30       	cpi	r28, 0x08	; 8
		// write character data
		lcdDataWrite( pgm_read_byte_far(lcd_temp+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
 4b0:	48 f3       	brcs	.-46     	; 0x484 <lcdLoadCustomChar+0x22>
 4b2:	80 2f       	mov	r24, r16
 4b4:	80 68       	ori	r24, 0x80	; 128
 4b6:	41 df       	rcall	.-382    	; 0x33a <lcdControlWrite>

}
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	08 95       	ret

000004c2 <lcdInit>:
/*************************************************************/

void lcdInit()
{
	// 하드웨어 초기화 
	lcdInitHW(); 
 4c2:	d0 de       	rcall	.-608    	; 0x264 <lcdInitHW>
	// LCD function set
	lcdControlWrite(LCD_FUNCTION_DEFAULT);
 4c4:	88 e3       	ldi	r24, 0x38	; 56
 4c6:	39 df       	rcall	.-398    	; 0x33a <lcdControlWrite>
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	37 df       	rcall	.-402    	; 0x33a <lcdControlWrite>
	ms_delay(60);	// wait 60ms
 4cc:	8c e3       	ldi	r24, 0x3C	; 60
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	07 de       	rcall	.-1010   	; 0xe0 <ms_delay>
	// set entry mode
	lcdControlWrite(1<<LCD_ENTRY_MODE | 1<<LCD_ENTRY_INC);
 4d2:	86 e0       	ldi	r24, 0x06	; 6
 4d4:	32 df       	rcall	.-412    	; 0x33a <lcdControlWrite>
	// set display to on
	//lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY | 1<<LCD_ON_BLINK);
	lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY );
 4d6:	8c e0       	ldi	r24, 0x0C	; 12
 4d8:	30 df       	rcall	.-416    	; 0x33a <lcdControlWrite>
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	2e df       	rcall	.-420    	; 0x33a <lcdControlWrite>
	// set data address to 0
	lcdControlWrite(1<<LCD_DDRAM | 0x00);
 4de:	80 e8       	ldi	r24, 0x80	; 128
 4e0:	2c df       	rcall	.-424    	; 0x33a <lcdControlWrite>

	// load the first 8 custom characters
	lcdLoadCustomChar(0,0);
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	bd df       	rcall	.-134    	; 0x462 <lcdLoadCustomChar>
	lcdLoadCustomChar(1,1);
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	ba df       	rcall	.-140    	; 0x462 <lcdLoadCustomChar>
	lcdLoadCustomChar(2,2);
 4ee:	62 e0       	ldi	r22, 0x02	; 2
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	b7 df       	rcall	.-146    	; 0x462 <lcdLoadCustomChar>
	lcdLoadCustomChar(3,3);
 4f4:	63 e0       	ldi	r22, 0x03	; 3
 4f6:	83 e0       	ldi	r24, 0x03	; 3
 4f8:	b4 df       	rcall	.-152    	; 0x462 <lcdLoadCustomChar>
	lcdLoadCustomChar(4,4);
 4fa:	64 e0       	ldi	r22, 0x04	; 4
 4fc:	84 e0       	ldi	r24, 0x04	; 4
 4fe:	b1 df       	rcall	.-158    	; 0x462 <lcdLoadCustomChar>
 500:	65 e0       	ldi	r22, 0x05	; 5
	lcdLoadCustomChar(5,5);
 502:	85 e0       	ldi	r24, 0x05	; 5
 504:	ae df       	rcall	.-164    	; 0x462 <lcdLoadCustomChar>
 506:	66 e0       	ldi	r22, 0x06	; 6
 508:	86 e0       	ldi	r24, 0x06	; 6
	lcdLoadCustomChar(6,6);
 50a:	ab df       	rcall	.-170    	; 0x462 <lcdLoadCustomChar>
 50c:	67 e0       	ldi	r22, 0x07	; 7
 50e:	87 e0       	ldi	r24, 0x07	; 7
 510:	a8 cf       	rjmp	.-176    	; 0x462 <lcdLoadCustomChar>
	lcdLoadCustomChar(7,7);
 512:	08 95       	ret

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
