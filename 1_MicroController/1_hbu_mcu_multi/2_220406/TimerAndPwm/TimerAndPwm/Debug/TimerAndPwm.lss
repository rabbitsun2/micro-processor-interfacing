
TimerAndPwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000947  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000830  00000000  00000000  00000b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000323  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e1  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001bbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1c d0       	rcall	.+56     	; 0xd2 <main>
  9a:	24 c0       	rjmp	.+72     	; 0xe4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <turnOn>:
#include <util/delay.h>

void turnOn(char Light){
	
	// OCR0 값을 조절하여 밝기 조절함.
	for (Light = 0; Light < 255; Light++){
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <turnOn+0x14>
		OCR0 = Light;
  a2:	81 bf       	out	0x31, r24	; 49
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	ef e9       	ldi	r30, 0x9F	; 159
  a6:	ff e0       	ldi	r31, 0x0F	; 15
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <turnOn+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <turnOn+0x10>
  ae:	00 00       	nop
#include <util/delay.h>

void turnOn(char Light){
	
	// OCR0 값을 조절하여 밝기 조절함.
	for (Light = 0; Light < 255; Light++){
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	8f 3f       	cpi	r24, 0xFF	; 255
  b4:	b1 f7       	brne	.-20     	; 0xa2 <turnOn+0x4>
		OCR0 = Light;
		_delay_ms(10);
	}
	
}
  b6:	08 95       	ret

000000b8 <turnOff>:

void turnOff(char Light){
	
	// OCR0 값을 조절하여 밝기 조절함.
	for (Light = 255; 0 < Light; Light--){
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	08 c0       	rjmp	.+16     	; 0xcc <turnOff+0x14>
		OCR0 = Light;
  bc:	81 bf       	out	0x31, r24	; 49
  be:	ef e9       	ldi	r30, 0x9F	; 159
  c0:	ff e0       	ldi	r31, 0x0F	; 15
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <turnOff+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <turnOff+0x10>
  c8:	00 00       	nop
}

void turnOff(char Light){
	
	// OCR0 값을 조절하여 밝기 조절함.
	for (Light = 255; 0 < Light; Light--){
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	81 11       	cpse	r24, r1
  ce:	f6 cf       	rjmp	.-20     	; 0xbc <turnOff+0x4>
		OCR0 = Light;
		_delay_ms(10);
	}
	
}
  d0:	08 95       	ret

000000d2 <main>:

int main(void)
{
    unsigned char Light = 0;
	
	DDRB = 0x10;
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	87 bb       	out	0x17, r24	; 23
	
	TCCR0 = 0x71;
  d6:	81 e7       	ldi	r24, 0x71	; 113
  d8:	83 bf       	out	0x33, r24	; 51
	
	//TCNT0 = 0;
	
    while (1) 
    {
		turnOn(Light);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	e0 df       	rcall	.-64     	; 0x9e <turnOn>
		turnOff(Light);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	eb df       	rcall	.-42     	; 0xb8 <turnOff>
  e2:	fb cf       	rjmp	.-10     	; 0xda <main+0x8>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
