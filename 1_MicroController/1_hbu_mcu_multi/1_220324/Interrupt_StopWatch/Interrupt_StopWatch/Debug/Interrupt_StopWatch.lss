
Interrupt_StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009da  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000838  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ad  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018a  00000000  00000000  00001e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001fd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	f3 c0       	rjmp	.+486    	; 0x1ec <__vector_1>
   6:	00 00       	nop
   8:	09 c1       	rjmp	.+530    	; 0x21c <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	bf c0       	rjmp	.+382    	; 0x244 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

ISR(INT0_vect);
ISR(INT1_vect);

int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	61 97       	sbiw	r28, 0x11	; 17
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char FND_DATA_TBL[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66,
  dc:	81 e1       	ldi	r24, 0x11	; 17
  de:	e0 e0       	ldi	r30, 0x00	; 0
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x1e>
									0x6D, 0x7C, 0x07, 0x7F, 0x67,
									0x77, 0x7C, 0x39, 0x5E, 0x79,
									0x08, 0x80};
									
	DDRD = 0xFC;
  ee:	8c ef       	ldi	r24, 0xFC	; 252
  f0:	81 bb       	out	0x11, r24	; 17
	
	DDRG = 0x0F;
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRE = 0xFF;
  f8:	9f ef       	ldi	r25, 0xFF	; 255
  fa:	92 b9       	out	0x02, r25	; 2
	
	EICRA = 0x0F;
  fc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0x00;
 100:	1a be       	out	0x3a, r1	; 58
	EIMSK = 0x03;
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	89 bf       	out	0x39, r24	; 57
	
	EIFR = 0x03;
 106:	88 bf       	out	0x38, r24	; 56
	
	sei();
 108:	78 94       	sei
	
    while (1) 
    {
		PORTG = 0x07;
 10a:	e5 e6       	ldi	r30, 0x65	; 101
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	87 e0       	ldi	r24, 0x07	; 7
 110:	80 83       	st	Z, r24
		PORTE = FND_DATA_TBL[time_100ms];
 112:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <time_100ms>
 116:	a1 e0       	ldi	r26, 0x01	; 1
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	ac 0f       	add	r26, r28
 11c:	bd 1f       	adc	r27, r29
 11e:	a8 0f       	add	r26, r24
 120:	b1 1d       	adc	r27, r1
 122:	8c 91       	ld	r24, X
 124:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	87 ea       	ldi	r24, 0xA7	; 167
 128:	91 e6       	ldi	r25, 0x61	; 97
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x62>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x68>
 130:	00 00       	nop
		
		_delay_ms(100);
		PORTG = 0x0B;
 132:	8b e0       	ldi	r24, 0x0B	; 11
 134:	80 83       	st	Z, r24
		
		PORTG = 0x0D;
 136:	8d e0       	ldi	r24, 0x0D	; 13
 138:	80 83       	st	Z, r24
		PORTE = FND_DATA_TBL[time_1s];
 13a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <time_1s>
 13e:	a1 e0       	ldi	r26, 0x01	; 1
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	ac 0f       	add	r26, r28
 144:	bd 1f       	adc	r27, r29
 146:	a8 0f       	add	r26, r24
 148:	b1 1d       	adc	r27, r1
 14a:	8c 91       	ld	r24, X
 14c:	83 b9       	out	0x03, r24	; 3
 14e:	9f e3       	ldi	r25, 0x3F	; 63
 150:	2d e0       	ldi	r18, 0x0D	; 13
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	91 50       	subi	r25, 0x01	; 1
 156:	20 40       	sbci	r18, 0x00	; 0
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x8c>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x96>
 15e:	00 00       	nop
		_delay_ms(1000);
		
		PORTG = 0x0E;
 160:	8e e0       	ldi	r24, 0x0E	; 14
 162:	80 83       	st	Z, r24
		PORTE = FND_DATA_TBL[time_10s];
 164:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <time_10s>
 168:	e1 e0       	ldi	r30, 0x01	; 1
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	ec 0f       	add	r30, r28
 16e:	fd 1f       	adc	r31, r29
 170:	e8 0f       	add	r30, r24
 172:	f1 1d       	adc	r31, r1
 174:	80 81       	ld	r24, Z
 176:	83 b9       	out	0x03, r24	; 3
 178:	9f e3       	ldi	r25, 0x3F	; 63
 17a:	2d e0       	ldi	r18, 0x0D	; 13
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	91 50       	subi	r25, 0x01	; 1
 180:	20 40       	sbci	r18, 0x00	; 0
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0xb6>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0xc0>
 188:	00 00       	nop
		_delay_ms(1000);
		
		if(Time_STOP == 1)
 18a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	09 f4       	brne	.+2      	; 0x194 <main+0xcc>
 192:	bb cf       	rjmp	.-138    	; 0x10a <main+0x42>
			continue;
			
		time_10ms++;
 194:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time_10ms>
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time_10ms>
		if(time_10ms == 10){
 19e:	8a 30       	cpi	r24, 0x0A	; 10
 1a0:	39 f4       	brne	.+14     	; 0x1b0 <main+0xe8>
			time_10ms = 0;
 1a2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <time_10ms>
			time_100ms++;
 1a6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <time_100ms>
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <time_100ms>
		}
		
		if(time_100ms == 10){
 1b0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <time_100ms>
 1b4:	8a 30       	cpi	r24, 0x0A	; 10
 1b6:	39 f4       	brne	.+14     	; 0x1c6 <main+0xfe>
			time_100ms = 0;
 1b8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <time_100ms>
			time_1s++;
 1bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <time_1s>
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <time_1s>
		}
		
		if(time_1s == 10){
 1c6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <time_1s>
 1ca:	8a 30       	cpi	r24, 0x0A	; 10
 1cc:	39 f4       	brne	.+14     	; 0x1dc <main+0x114>
			time_1s = 0;
 1ce:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <time_1s>
			time_10s++;
 1d2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <time_10s>
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <time_10s>
		}
		
		if(time_10s == 10){
 1dc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <time_10s>
 1e0:	8a 30       	cpi	r24, 0x0A	; 10
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <main+0x11e>
 1e4:	92 cf       	rjmp	.-220    	; 0x10a <main+0x42>
			time_10s = 0;
 1e6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <time_10s>
 1ea:	8f cf       	rjmp	.-226    	; 0x10a <main+0x42>

000001ec <__vector_1>:
	return 0;
}



ISR(INT0_vect){
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
	
	cli();
 1f8:	f8 94       	cli
	if(Time_STOP == 0){
 1fa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1fe:	81 11       	cpse	r24, r1
 200:	04 c0       	rjmp	.+8      	; 0x20a <__vector_1+0x1e>
		Time_STOP = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 208:	02 c0       	rjmp	.+4      	; 0x20e <__vector_1+0x22>
	}
	else{
		Time_STOP = 0;
 20a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	}
	sei();
 20e:	78 94       	sei
}
 210:	8f 91       	pop	r24
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_2>:

ISR(INT1_vect){
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
	
	cli();
 226:	f8 94       	cli
	
	time_10ms = 0;
 228:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <time_10ms>
	time_100ms = 0;
 22c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <time_100ms>
	time_1s = 0;
 230:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <time_1s>
	time_10s = 0;
 234:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <time_10s>
	
	sei();
 238:	78 94       	sei
	
}
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
